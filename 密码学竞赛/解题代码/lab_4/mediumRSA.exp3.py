import gmpy2
from Crypto.Util.number import getPrime,long_to_bytes
from sympy.ntheory.modular import crt
e1=58169
e2=42239
c1= 3692766036283943540313098286304266510361347054708449055542682692062073711536589405245241980174280061301491545039062178654512803574650276066141843678772940052974701
c2= 4373393412365268398260265778309120474718099194920969619404064575346090988834876519040940374935708519313863690656260819783978176441771230081801993603349968832253841
n = 145761754843820286365615274695640462761297014274071268462997502840493581759068851634614
p_1=59325084105703052924591608131999057040970985451532745996619380611443126855843
p_2=58169
p_3=42239
phi=(p_2-1)*(p_1-1)*(p_3-1)
x,s1, s2 = gmpy2.gcdext(e1, e2)
#print(x)
m1 = pow(c1, s1, n) * pow(c2, s2, n) % n
#m1=gmpy2.iroot(m1,x)[0]
#print(long_to_bytes(m1))
n1= 9759279324467394597831711179718508596171969739950295636856128025950371638938763801180107390878866914987308475151240906371719577893672311903919490118982067214334274
n2= 9362045778153069747981245933168456546468217717807806351786212097034735112184049936432161182243085684425770148036861181126308293616916494342533801458613562708886078
q1=n1//n
q2=n2//n
cc1=c1%q1
cc2=c2%q2
d1=gmpy2.invert(e1,q1-1)
d2=gmpy2.invert(e2,q2-1)
m2=pow(cc1,d1,q1)
m3=pow(cc2,d2,q2)
res1,mod1=crt([n,q1],[m1,m2])
res2,mod2=crt([q1,q2],[m2,m3])
res3,mod3=crt([n,q2],[m1,m3])
print(long_to_bytes(res1))
print(long_to_bytes(res2))
print(long_to_bytes(res3))
#flag{c9bb7035-36ca-4dc8-923c-34ad6229051c_Lionel_Messi_Come_On}
